{"ast":null,"code":"export let myFindResultsActionTypes;\n\n(function (myFindResultsActionTypes) {\n  myFindResultsActionTypes[\"fetchResultsPending\"] = \"fetchResultsPending\";\n  myFindResultsActionTypes[\"fetchResultsSuccess\"] = \"fetchResultsSuccess\";\n  myFindResultsActionTypes[\"fetchResultsError\"] = \"fetchResultsError\";\n  myFindResultsActionTypes[\"totalProductsChange\"] = \"totalProductsChange\";\n})(myFindResultsActionTypes || (myFindResultsActionTypes = {}));\n\nexport function fetchResultsPending() {\n  return {\n    type: myFindResultsActionTypes.fetchResultsPending\n  };\n}\nexport function fetchResultsSuccess(payload) {\n  return {\n    type: myFindResultsActionTypes.fetchResultsSuccess,\n    payload\n  };\n}\nexport function fetchResultsError(payload) {\n  return {\n    type: myFindResultsActionTypes.fetchResultsError,\n    payload\n  };\n}\nexport function totalProductsChange(payload) {\n  return {\n    type: myFindResultsActionTypes.totalProductsChange,\n    payload\n  };\n}","map":{"version":3,"sources":["/Users/peliculas/empresariales/give-it/src/actions/findResultsAction.tsx"],"names":["myFindResultsActionTypes","fetchResultsPending","type","fetchResultsSuccess","payload","fetchResultsError","totalProductsChange"],"mappings":"AAGA,WAAYA,wBAAZ;;WAAYA,wB;AAAAA,EAAAA,wB;AAAAA,EAAAA,wB;AAAAA,EAAAA,wB;AAAAA,EAAAA,wB;GAAAA,wB,KAAAA,wB;;AAyBZ,OAAO,SAASC,mBAAT,GAA0D;AAC/D,SAAO;AACLC,IAAAA,IAAI,EAAEF,wBAAwB,CAACC;AAD1B,GAAP;AAGD;AAED,OAAO,SAASE,mBAAT,CACLC,OADK,EAEsB;AAC3B,SAAO;AACLF,IAAAA,IAAI,EAAEF,wBAAwB,CAACG,mBAD1B;AAELC,IAAAA;AAFK,GAAP;AAID;AAED,OAAO,SAASC,iBAAT,CAA2BD,OAA3B,EAAkE;AACvE,SAAO;AACLF,IAAAA,IAAI,EAAEF,wBAAwB,CAACK,iBAD1B;AAELD,IAAAA;AAFK,GAAP;AAID;AACD,OAAO,SAASE,mBAAT,CAA6BF,OAA7B,EAAmE;AACxE,SAAO;AACLF,IAAAA,IAAI,EAAEF,wBAAwB,CAACM,mBAD1B;AAELF,IAAAA;AAFK,GAAP;AAID","sourcesContent":["import IProduct from '../models/ProductModel';\nimport { Action } from 'redux';\n\nexport enum myFindResultsActionTypes {\n  fetchResultsPending = 'fetchResultsPending',\n  fetchResultsSuccess = 'fetchResultsSuccess',\n  fetchResultsError = 'fetchResultsError',\n  totalProductsChange = 'totalProductsChange'\n}\n\ninterface GenericAction<T, P = any> extends Action<T> {\n  payload: P;\n}\ntype fetchResultsPendingAction = Action<\n  myFindResultsActionTypes.fetchResultsPending\n>;\ntype fetchResultsSuccessAction = GenericAction<\n  myFindResultsActionTypes.fetchResultsSuccess,\n  IProduct[]\n>;\ntype fetchResultsErrorAction = GenericAction<\n  myFindResultsActionTypes.fetchResultsError\n>;\n\ntype totalProductsChange = GenericAction<\n  myFindResultsActionTypes.totalProductsChange,\n  number\n>;\nexport function fetchResultsPending(): fetchResultsPendingAction {\n  return {\n    type: myFindResultsActionTypes.fetchResultsPending\n  };\n}\n\nexport function fetchResultsSuccess(\n  payload: IProduct[]\n): fetchResultsSuccessAction {\n  return {\n    type: myFindResultsActionTypes.fetchResultsSuccess,\n    payload\n  };\n}\n\nexport function fetchResultsError(payload: any): fetchResultsErrorAction {\n  return {\n    type: myFindResultsActionTypes.fetchResultsError,\n    payload\n  };\n}\nexport function totalProductsChange(payload: number): totalProductsChange {\n  return {\n    type: myFindResultsActionTypes.totalProductsChange,\n    payload\n  };\n}\nexport type fetchResultsActionTypes =\n  | fetchResultsPendingAction\n  | fetchResultsSuccessAction\n  | fetchResultsErrorAction\n  | totalProductsChange;\n"]},"metadata":{},"sourceType":"module"}